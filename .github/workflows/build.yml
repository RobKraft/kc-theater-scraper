name: Build and Deploy KC Theater Scraper

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  schedule:
    # Run daily at 6 AM UTC to refresh theater data
    - cron: '0 6 * * *'

jobs:
  build-console:
    name: Build Console Application
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x
        
    - name: Restore dependencies (Console App)
      run: dotnet restore KCTheaterScraper/KCTheaterScraper.csproj
      
    - name: Build Console App
      run: dotnet build KCTheaterScraper/KCTheaterScraper.csproj --no-restore --configuration Release
      
    - name: Test venue list
      run: dotnet run --project KCTheaterScraper/KCTheaterScraper.csproj --configuration Release list
      
    - name: Create artifacts
      run: |
        mkdir -p artifacts
        dotnet publish KCTheaterScraper/KCTheaterScraper.csproj --configuration Release --output artifacts/
        
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: kc-theater-scraper-console
        path: artifacts/

  build-and-deploy-static:
    name: Build and Deploy Static Site to Netlify
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Install Netlify CLI
      run: npm install -g netlify-cli
        
    - name: Restore dependencies (Console App)
      run: dotnet restore KCTheaterScraper/KCTheaterScraper.csproj
      
    - name: Build Console App
      run: dotnet build KCTheaterScraper/KCTheaterScraper.csproj --no-restore --configuration Release
      
    - name: Run Scraper to Generate Data
      run: |
        cd KCTheaterScraper
        # Run scraper with timeout to prevent hanging
        timeout 120 dotnet run --configuration Release scrape || echo "Scraper completed or timed out"
        
        # Ensure we have data files (use sample data if scraping failed)
        if [ ! -f "./output/kc-theater-events.json" ]; then
          echo "No scraped data found, using sample data"
          mkdir -p ./output
          # Create sample data for demo
          cat > ./output/kc-theater-events.json << 'JSON'
        [
          {
            "id": "1",
            "title": "Romeo and Juliet",
            "description": "Shakespeare's timeless tale of star-crossed lovers in a beautiful new production.",
            "startDate": "2025-08-15T19:30:00",
            "venueName": "Kauffman Center for the Performing Arts"
          },
          {
            "id": "2", 
            "title": "The Phantom of the Opera",
            "description": "The beloved musical returns to Kansas City with stunning performances.",
            "startDate": "2025-08-20T20:00:00",
            "venueName": "Music Hall Kansas City"
          },
          {
            "id": "3",
            "title": "A Midsummer Night's Dream", 
            "description": "A magical comedy under the stars at Starlight Theatre.",
            "startDate": "2025-08-25T19:00:00",
            "venueName": "Starlight Theatre"
          }
        ]
        JSON
        fi
        
    - name: Build Static Site
      run: |
        cd KCTheaterScraper
        
        # Run our PowerShell script equivalent in bash
        OUTPUT_PATH="./static-site"
        DATA_PATH="./output"
        
        echo "Building static site for KC Theater Web App..."
        
        # Clean and create output directory
        rm -rf "$OUTPUT_PATH"
        mkdir -p "$OUTPUT_PATH"
        
        # Copy data files
        echo "Copying data files..."
        mkdir -p "$OUTPUT_PATH/data"
        if [ -d "$DATA_PATH" ]; then
          cp "$DATA_PATH"/*.json "$OUTPUT_PATH/data/" 2>/dev/null || echo "No JSON files to copy"
        fi
        
        # Copy our enhanced static site files
        echo "Copying static site files..."
        cp -r ./static-site/* "$OUTPUT_PATH/" 2>/dev/null || echo "Static site files copied"
        
        # Ensure we have the netlify.toml file
        if [ ! -f "$OUTPUT_PATH/netlify.toml" ]; then
          cat > "$OUTPUT_PATH/netlify.toml" << 'TOML'
        [build]
          publish = "."

        [[redirects]]
          from = "/*"
          to = "/index.html"
          status = 200

        [[headers]]
          for = "*.json"
          [headers.values]
            Content-Type = "application/json"
            Cache-Control = "public, max-age=3600"
        TOML
        fi
        
        echo "Static site build complete!"
        ls -la "$OUTPUT_PATH"
        
    - name: Deploy to Netlify
      env:
        NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
        NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
      run: |
        cd KCTheaterScraper/static-site
        echo "Deploying to Netlify..."
        netlify deploy --prod --dir . --site $NETLIFY_SITE_ID --auth $NETLIFY_AUTH_TOKEN
